<!DOCTYPE html>
<meta charset="utf-8">

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v4.js"></script>

<!-- Create a div where the graph will take place -->
<div id="my_dataviz"></div>

<!-- Load color palettes -->
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>


<script>


// set the dimensions and margins of the graph
var margin = {top: 80, right: 150, bottom: 30, left: 150},
  width = 1300 - margin.left - margin.right,
  height = 750 - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#my_dataviz")
.append("svg")
  .attr("width", width + margin.left + margin.right)
  .attr("height", height + margin.top + margin.bottom)
.append("g")
  .attr("transform",
        "translate(" + margin.left + "," + margin.top + ")");

//Read the data

var data = {{ panel }}

// Labels of row and columns -> unique identifier of the column called 'gene+accession' and 'exon'
var flatData = data.flatMap( d => Object.entries( d.nNGM.exons ).map( ([exonK,exonV]) => ( { ...d, exon: exonK, ...exonV } ) ) ) // numeric

// Build X scales and axis:
var x = d3.scaleBand()
  .range([ 0, height ])
  .domain( data.map( d => d.nNGM.hugoSymbol ) )
  .padding(0.05);
// Build Y scales and axis:

var y = d3.scaleBand()
  .range([ 0, width ])
  .domain( [...new Set( data.flatMap( d => Object.keys(d.nNGM.exons) ).sort((a, b) => a - b) ) ] ) // numeric sort
  .padding(0.05);
// Build X scales and axis:
var x2 = d3.scaleBand()
  .range([ 0, height ])
  .domain( data.map( d => d.nNGM.grch37RefSeq ) )
  .padding(0.05);

svg.append("g")
  .style("font-size", 15)
  .call(d3.axisLeft(x).tickSize(0))
  .select(".domain").remove()

svg.append("g")
  .style("font-size", 15)
  .attr("transform", "translate(" + width + ",0)")
  .call(d3.axisRight(x2).tickSize(0))
  .select(".domain").remove()

svg.append("g")
  .style("font-size", 15)
  .attr("transform", "translate(0," + height + ")")
  .call(d3.axisBottom(y).tickSize(0))
  .select(".domain").remove()

// Build color scale
var myColor = d3.scaleSequential()
  .interpolator(d3.interpolateRdYlGn)
  .domain([1,0])

// create a tooltip
var tooltip = d3.select("#my_dataviz")
  .append("div")
  .style("display", "none")
  .attr("class", "tooltip")
  .style("background-color", "white")
  .style("border", "solid")
  .style("border-width", "2px")
  .style("border-radius", "5px")
  .style("padding", "5px")

// Three function that change the tooltip when user hover / move / leave a cell
var mouseover = function(d,i) {
  tooltip
    .style("display", undefined)
  d3.select(this)
    .style("opacity", 1)
}
var mousemove = function(d) {
  tooltip
    .html("Gene: " + d.nNGM.hugoSymbol + "<br>Transcript ID: " + d.nNGM.grch37RefSeq + "<br>Exon: " + d.exon + "<br>Expected variants: " + d.expVariants + "<br>Observed variants: " + ( d.obsVariants === undefined ? "Not profiled" : d.obsVariants ) )
    .style("left", (d3.mouse(this)[0]+170) + "px")
    .style("top", (d3.mouse(this)[1]) + "px")
    .style("position", "fixed")
}
var mouseleave = function(d) {
  tooltip
    .style("display", "none")
  d3.select(this)
    .style("stroke", "none")
    .style("opacity", 0.8)
}

// add the squares
svg.selectAll()
  .data(flatData, function(d,i) {return i;}) // custom key function
  .enter()
  .append("rect")
    .attr("y", function(d) { return x2(d.nNGM.grch37RefSeq) })
    .attr("x", function(d) { return y(d.exon) })
    .attr("rx", 4)
    .attr("ry", 4)
    .attr("width", x.bandwidth() )
    .attr("height", y.bandwidth() )
    .style("fill", function(d) { return d.expVariants === "Not profiled" ? "#dddddd" : myColor(Math.abs( d.expVariants-d.obsVariants ) ) } )
    .style("stroke-width", 4)
    .style("stroke", "none")
    .style("opacity", 0.8)
  .on("mouseover", mouseover)
  .on("mousemove", mousemove)
  .on("mouseleave", mouseleave)

// Add title to graph
svg.append("text")
        .attr("x", 0)
        .attr("y", -50)
        .attr("text-anchor", "left")
        .style("font-size", "22px")
        .text("nNGM panel v2.0 exon testing, VEP version 104.3");

// Add subtitle to graph
svg.append("text")
        .attr("x", 0)
        .attr("y", -20)
        .attr("text-anchor", "left")
        .style("font-size", "14px")
        .style("fill", "green")
        .style("max-width", 400)
        .text("green cells: ok");

svg.append("text")
        .attr("x", 200)
        .attr("y", -20)
        .attr("text-anchor", "left")
        .style("font-size", "14px")
        .style("fill", "red")
        .style("max-width", 400)
        .text("red cells: not ok");

svg.append("text")
        .attr("x", 400)
        .attr("y", -20)
        .attr("text-anchor", "left")
        .style("font-size", "14px")
        .style("fill", "grey")
        .style("max-width", 400)
        .text("gray cells: not profiled");


svg.append("text")
        .attr("x", -60)
        .attr("y", 13)
        .attr("transform", "translate(0," + height + ")")
        .attr("text-anchor", "left")
        .style("font-size", "14px")
        .style("fill", "grey")
        .style("max-width", 400)
        .text("exons →");

svg.append("text")
        .attr("x", 10)
        .attr("y", 13)
        .attr("transform", "translate(" + width + "," + height + ")")
        .attr("text-anchor", "left")
        .style("font-size", "14px")
        .style("fill", "grey")
        .style("max-width", 400)
        .text("↑ nNGM transcript ID");




for ( gene of data ) {

  function decorateTranscriptId(gene, d) {
    return d +
           ( gene.nNGM.grch37RefSeq === d ? " (nNGM)" : "" ) +
           ( gene.oncoKB.grch37RefSeq === d ? " (oncoKB)" : "" ) +
           ( gene.jaxCKB?.Transcript === d ? " (jaxCKB)" : "" )
  }

  // set the dimensions and margins of the graph
  var unit = 50
  var margin = {top: 300, right: 300, bottom: 300, left: 300},
    width = ( unit ) * Object.entries(gene.transcripts).length,
    height = ( unit ) * Object.entries(gene.transcripts).length;

  console.log(width,height)

  // append the svg object to the body of the page
  var svg = d3.select("#my_dataviz")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");


  // console.log(gene)
  // Labels of row and columns -> unique identifier of the column called 'gene+accession' and 'exon'

  var geneData = []
  var flatData = []
  for (const [key, value] of Object.entries(gene.transcripts)) {
    geneData.push(key)
    for (const [hit, score] of Object.entries(value)) {
      if ( hit !== "fasta" ) {
        flatData.push( { source: key, target: hit, score: score } )
      }
    }

  }
  console.log(flatData, geneData)

  // Build X scales and axis:
  var x = d3.scaleBand()
    .range([ 0, height ])
    .domain( geneData )
    .padding(0.05);
  // Build Y scales and axis:

  var y = d3.scaleBand()
    .range([ 0, width ])
    .domain( geneData )
    .padding(0.05);
  // Build X scales and axis:
  console.log()
  var x2 = d3.scaleBand()
    .range([ 0, height ])
    .domain( geneData )
    .padding(0.05);

  svg.append("g")
    .style("font-size", 15)
    .call(d3.axisLeft(x).tickSize(0))

  svg.append("g")
    .style("font-size", 15)
    .attr("transform", "translate(" + width + ",0)")
    .call(d3.axisRight(x2).tickSize(0).tickFormat( d => decorateTranscriptId(gene, d) ) )


  svg.append("g")
    .style("font-size", 15)
    .attr("transform", "translate(0," + height + ") ")
    .call(d3.axisBottom(y).tickSize(0).tickFormat( d => decorateTranscriptId(gene, d) ) )
    .selectAll("text")
      .style("text-anchor", "start")
      .attr("dx", ".8em")
      .attr("dy", ".8em")
      .attr("transform", "rotate(65)")
    .select(".domain").remove()

  // Build color scale
  var myColor = d3.scaleSequential()
    .interpolator(d3.interpolateRdYlGn)
    .domain([1,0])

  // create a tooltip
  var tooltip = d3.select("#my_dataviz")
    .append("div")
    .style("display", "none")
    .attr("class", "tooltip")
    .style("background-color", "white")
    .style("border", "solid")
    .style("border-width", "2px")
    .style("border-radius", "5px")
    .style("padding", "5px")

  // Three function that change the tooltip when user hover / move / leave a cell
  var mouseover = function(d,i) {
    tooltip
      .style("display", undefined)
    d3.select(this)
      .style("opacity", 1)
  }
  var mousemove = function(d) {
    tooltip
      .html("Query: " + d.source + "<br>Subject: " + d.target + "<br>BLAST identity: " + d.score + "%" )
      .style("left", (d3.mouse(this)[0]+170) + "px")
      .style("top", (d3.mouse(this)[1]) + "px")
      .style("position", "fixed")
  }
  var mouseleave = function(d) {
    tooltip
      .style("display", "none")
    d3.select(this)
      .style("stroke", "none")
      .style("opacity", 0.8)
  }

  // add the squares
  svg.selectAll()
    .data(flatData, function(d,i) {console.log(d); return i;}) // custom key function
    .enter()
    .append("g")
    .attr("transform", d => "translate(" + x2(d.target) + "," + y(d.source) + ")" )
    .style("opacity", 0.8 )
    .on("mouseover", mouseover)
    .on("mousemove", mousemove)
    .on("mouseleave", mouseleave)
    .append("rect")
      .attr("rx", 4)
      .attr("ry", 4)
      .attr("width", x.bandwidth() )
      .attr("height", y.bandwidth() )
      .style("fill", d => d.score === 100 ? "green" : "red" )
      .style("stroke-width", 4)
      .style("stroke", "none")

    .select(function(){
      return this.parentNode;
    })
    .append("text")
    .attr("text-anchor", "middle")
    .attr("x", x.bandwidth()/2)
    .attr("y", y.bandwidth()/2+5)
    .text(d => d.score)

  // Add title to graph
  svg.append("text")
          .attr("x", 0)
          .attr("y", -50)
          .attr("text-anchor", "left")
          .style("font-size", "22px")
          .text("nNGM panel v2.0 exon testing, VEP version 104.3");

  // Add subtitle to graph
  svg.append("text")
          .attr("x", 0)
          .attr("y", -20)
          .attr("text-anchor", "left")
          .style("font-size", "14px")
          .style("fill", "green")
          .style("max-width", 400)
          .text("green cells: protein identical");

  svg.append("text")
          .attr("x", 200)
          .attr("y", -20)
          .attr("text-anchor", "left")
          .style("font-size", "14px")
          .style("fill", "red")
          .style("max-width", 400)
          .text("red cells: not identical");


  svg.append("text")
          .attr("x", -60)
          .attr("y", 13)
          .attr("transform", "translate(0," + height + ")")
          .attr("text-anchor", "left")
          .style("font-size", "14px")
          .style("fill", "grey")
          .style("max-width", 400)
          .text(gene.hugoSymbol);


}



</script>
